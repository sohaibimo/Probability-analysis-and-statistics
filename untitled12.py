# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17C6SHhGiIyDVf-k0B409jObt4cQBhOSY
"""

def calculator():
    print("Welcome to the Calculator!")
    print("Choose an operation:")
    print("1. Addition (+)")
    print("2. Subtraction (-)")
    print("3. Multiplication (*)")
    print("4. Division (/)")


    operation = input("Enter the number corresponding to the operation (1/2/3/4): ")

    if operation not in ['1', '2', '3', '4']:
        print("Invalid operation. Please run the program again.")
        return

    try:
        num1 = float(input("Enter the first number: "))
        num2 = float(input("Enter the second number: "))
    except ValueError:
        print("Invalid input. Please enter numbers only.")
        return


    if operation == '1':
        result = num1 + num2
        print(f"The result of {num1} + {num2} is {result}.")
    elif operation == '2':
        result = num1 - num2
        print(f"The result of {num1} - {num2} is {result}.")
    elif operation == '3':
        result = num1 * num2
        print(f"The result of {num1} * {num2} is {result}.")
    elif operation == '4':
        if num2 == 0:
            print("Error: Division by zero is not allowed.")
        else:
            result = num1 / num2
            print(f"The result of {num1} / {num2} is {result}.")


calculator()

def is_palindrome(string):

    cleaned_string = ''.join(char.lower() for char in string if char.isalnum())

    return cleaned_string == cleaned_string[::-1]


input_string = input("Enter a string to check if it's a Palindrome: ")


if is_palindrome(input_string):
    print(f'"{input_string}" is a Palindrome!')
else:
    print(f'"{input_string}" is non Palindrome.')

def is_prime(num):

    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def primes_in_range(start, end):

    return [num for num in range(start, end + 1) if is_prime(num)]

start = int(input("Enter the starting number: "))
end = int(input("Enter the ending number: "))
prime_list = primes_in_range(start, end)
print(f"Prime numbers between {start} and {end}: {prime_list}")

import random

def get_computer_choice():
    """Randomly select Rock, Paper, or Scissors for the computer."""
    return random.choice(["Rock", "Paper", "Scissors"])

def get_winner(player, computer):
    """Determine the winner of a round."""
    if player == computer:
        return "Draw"
    elif (player == "Rock" and computer == "Scissors") or \
         (player == "Paper" and computer == "Rock") or \
         (player == "Scissors" and computer == "Paper"):
        return "Player"
    else:
        return "Computer"

def play_game():
    print("Welcome to Rock, Paper, Scissors!")
    rounds = int(input("How many rounds would you like to play? "))
    player_score = 0
    computer_score = 0

    for round_num in range(1, rounds + 1):
        print(f"\nRound {round_num}:")
        player_choice = input("Enter your choice (Rock, Paper, Scissors): ").capitalize()

        if player_choice not in ["Rock", "Paper", "Scissors"]:
            print("Invalid choice! Please choose Rock, Paper, or Scissors.")
            continue

        computer_choice = get_computer_choice()
        print(f"Computer chose: {computer_choice}")

        winner = get_winner(player_choice, computer_choice)
        if winner == "Player":
            player_score += 1
            print("You win this round!")
        elif winner == "Computer":
            computer_score += 1
            print("Computer wins this round!")
        else:
            print("It's a draw!")

        print(f"Score - Player: {player_score}, Computer: {computer_score}")

    print("\nFinal Results:")
    print(f"Player: {player_score}, Computer: {computer_score}")
    if player_score > computer_score:
        print("Congratulations! You are the overall winner!")
    elif computer_score > player_score:
        print("Computer wins the game! Better luck next time.")
    else:
        print("It's a draw overall!")

# Run the game
play_game()

def generate_fibonacci(n):

    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]

    fibonacci_sequence = [0, 1]
    for i in range(2, n):

        next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2]
        fibonacci_sequence.append(next_number)
    return fibonacci_sequence
try:
    n = int(input("Enter the number of Fibonacci numbers to generate: "))
    if n < 0:
        print("Please enter a non-negative integer.")
    else:
        fib_sequence = generate_fibonacci(n)
        print(f"The first {n} numbers in the Fibonacci sequence are:")
        print(fib_sequence)
except ValueError:
    print("Invalid input. Please enter a positive integer.")

import random

def number_guessing_game():
    print("Welcome to the Number Guessing Game!")
    print("I'm thinking of a number between 1 and 100.")


    secret_number = random.randint(1, 100)
    attempts = 0

    while True:
        try:

            guess = int(input("Enter your guess: "))
            attempts += 1


            if guess < secret_number:
                print("Too low! Try again.")
            elif guess > secret_number:
                print("Too high! Try again.")
            else:
                print(f"Congratulations! You guessed the number in {attempts} attempts.")
                break
        except ValueError:
            print("Invalid input. Please enter a valid number.")


number_guessing_game()

def pyramid_pattern(n):
    """Generate a pyramid pattern with n rows."""
    for i in range(1, n + 1):

        spaces = ' ' * (n - i)

        stars = '*' * (2 * i - 1)

        print(spaces + stars)


try:
    n = int(input("Enter the number of rows for the pyramid: "))
    if n > 0:
        pyramid_pattern(n)
    else:
        print("Please enter a positive integer.")
except ValueError:
    print("Invalid input. Please enter a valid integer.")

def second_largest(numbers):
    """Return the second largest number in the list."""
    if len(numbers) < 2:
        return "List must contain at least two numbers."

    unique_numbers = list(set(numbers))

    if len(unique_numbers) < 2:
        return "List must contain at least two distinct numbers."


    unique_numbers.sort(reverse=True)
    return unique_numbers[1]


numbers = list(map(int, input("Enter a list of numbers separated by spaces: ").split()))

result = second_largest(numbers)
print(f"The second largest number is: {result}")

def find_common_elements(list1, list2):
    """Find and return the common elements between two lists."""
    common_elements = list(set(list1) & set(list2))
    return common_elements

# Example usage:
list1 = list(map(int, input("Enter the first list of numbers separated by spaces: ").split()))
list2 = list(map(int, input("Enter the second list of numbers separated by spaces: ").split()))

common_elements = find_common_elements(list1, list2)
print(f"The common elements between the two lists are: {common_elements}")

def generate_multiplication_table(number, up_to):

    for i in range(1, up_to + 1):
        result = number * i
        print(f"{number} x {i} = {result}")


try:
    number = int(input("Enter the number for the multiplication table: "))
    up_to = int(input("Enter the range up to which the table should go: "))

    if up_to < 1:
        print("Please enter a range greater than 0.")
    else:
        generate_multiplication_table(number, up_to)
except ValueError:
    print("Invalid input. Please enter valid integers.")